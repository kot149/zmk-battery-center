name: "Tauri Build"

on:
  workflow_dispatch:
  pull_request:
  # push:
  #   paths-ignore:
  #     - '*.md'
  #     - .vscode

# This workflow will build your tauri app without uploading it anywhere.

jobs:
  test-tauri:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          # - platform: "macos-latest"
          #   args: "--target universal-apple-darwin"
          # - platform: "ubuntu-22.04"
          #   args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: install frontend dependencies
        run: bun install --frozen-lockfile

      - name: Restore bun cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      # If tagName and releaseId are omitted tauri-action will only build the app and won't try to upload any assets.
      - uses: tauri-apps/tauri-action@v0
        id: tauri
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}

      - name: Convert artifact paths to relative and split (Unix)
        if: runner.os != 'Windows'
        id: relpath_unix
        run: |
          REL_PATHS=$(echo '${{ steps.tauri.outputs.artifactPaths }}' | jq -r '.[]' | sed "s#${{ github.workspace }}/##")
          echo "$REL_PATHS"
          echo "REL_PATHS<<EOF" >> $GITHUB_OUTPUT
          echo "$REL_PATHS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Convert artifact paths to relative and split (Windows)
        if: runner.os == 'Windows'
        id: relpath_win
        shell: pwsh
        run: |
          $paths = '${{ steps.tauri.outputs.artifactPaths }}' | ConvertFrom-Json
          $relPaths = $paths | ForEach-Object { $_ -replace [regex]::Escape("${{ github.workspace }}\"), "" }
          $relPathsString = $relPaths -join "`n"
          Write-Host $relPathsString
          "REL_PATHS<<EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          $relPathsString | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload Tauri Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.args != '' && format('tauri-artifacts-{0}-{1}', matrix.platform, matrix.args) || format('tauri-artifacts-{0}', matrix.platform) }}
          path: |
            ${{ runner.os == 'Windows' && steps.relpath_win.outputs.REL_PATHS || steps.relpath_unix.outputs.REL_PATHS }}